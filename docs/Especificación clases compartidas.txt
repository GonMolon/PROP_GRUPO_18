Especificación de clases del dominio


                          
Nombre: Grafo
Descripción: Clase que representa un grafo heterogéneo en el que sus nodos se relacionan mediante relaciones bilaterales.
Cardinalidad: 1. Aunque el usuario podrá almacenar varios grafos, solo se podrá tratar uno a la vez.
Atributos: Map<Author> authors, Map<Paper> papers, Map<Conference> conferences, Map<Term> terms, Map<Subject> subjects.
Relaciones:
* Agregación con la clase Nodo.
* Agregación con la clase Arista, que son las relaciones ternarias Nodo-Nodo-Relación.
Métodos:
-Graph()
Constructor para crear instancias de la clase graph.
-int getSizeOf(NodeType type)
Retorna la cantidad de nodos de tipo type que tiene el grafo.
-void addNode(Node node)
Añade al grafo el nodo pasado como parámetro. Le asigna el siguiente identificador disponible.
-void addNode(Node node, int id)
Añade al grafo el nodo pasado como parámetro. Le asigna el Id pasado com parámetro siempre y cuando no haya sido usado.
-void removeNode(int id, NodeType type)
Elimina el nodo correspondiente al Id = key dentro de los nodos del tipo type.
-Node getNode(int id, NodeType type)
Retorna el nodo correspondiente al Id = key dentro de los nodos del tipo type.


Nombre: Nodo
Descripción: Clase abstracta que representa un elemento de nuestra base de datos.
Cardinalidad: Al ser abstracta, 0. El número conjunto de instancias de sus subclases será equivalente al número de elementos presentes en nuestra base de datos.
Atributos: Valor contenido del elemento que variará en función del tipo de nodo (value, no static).
Relaciones:
* Asociación ternaria con la clase Nodo y Relación. Indica con qué elementos se relaciona y de qué manera.
* Asociación con todo Nodo mediante la clase asociativa HeteSim. Indica el nivel de relación con ese nodo en función de una estructura de relaciones.
Metodos:
-Node(string name, int Id)
Constructora que crea una instancia de la clase node.
-setValue(string value)
Permite establecer el valor de la instancia.
-addRelation(int relationID, int nodeId)
Permite añadir una nueva relacion  para el nodo.
-removeRelation(int relationID, int nodeId)
Permite borrar una relación.
-isRelated(int TypeId, int nodeId)
Permite ver si la instancia de node está relacionada con un determinado nodo.
-ArrayList<int> getRelations(int relationID)
Devuelve todas sus relaciones (arestas) de un tipo de relación.


Nombre: Conferencia
Descripción: Subclase de la clase nodo. Representa un elemento de tipo conferencia de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por elemento de tipo conferencia.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Término
Descripción: Subclase de la clase nodo. Representa un elemento de tipo término de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada palabra diferente presente en los valores de nodos de los demás tipos pertenecientes al grafo, excluyendo palabras genéricas como “at”, “how”, “on”, “the”, etc.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Autor
Descripción: Subclase de la clase nodo. Representa un elemento de tipo autor de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada elemento autor de nuestra base de datos.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Paper
Descripción: Subclase de la clase nodo. Representa un elemento de tipo paper de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada elemento paper de nuestra base de datos.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Temática
Descripción: Subclase de la clase nodo. Representa un elemento de tipo temática de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada temática de nuestra base de datos.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Relación
Descripción: Clase que representa un tipo de relación entre dos tipos de nodos.
Cardinalidad: Muchos. Se instanciará una vez por cada tipo de relación presente en el grafo.
Atributos: Tipo de relación entre los nodos.
Relaciones:
* Asociación ternaria con la clase Nodo i Nodo. Indica la relación entre dos elementos y el tipo de esta.
Métodos: 
- Relation()
Constructor para crear instancias de la clase Relation
- void createRelation(NodeType node_out, NodeType node_in, String name)
Crea un nuevo tipo de relación con un determinado nombre y que va de un tipo de nodo de entrada a un tipo de nodo de salida
- void removeRelation()
Elimina el tipo de relación.
- void setName(String name)
Cambia el nombre de la relación por el nombre especificado en el parámetro.
- void setNodeIn(NodeType node_in)
Cambia el tipo de nodo de entrada de la relación
- void setNodeOut(NodeType node_out)
Cambia el tipo de nodo de salida de la relación
- String getName()
Retorna el nombre de la relación.
- NodeType getNodeIn()
Retorna el tipo de nodo de entrada de la relación.
- NodeType getNodeOut()
Retorna el tipo de nodo de salida de la relación.
                          
Nombre: Arista
Descripción: Clase que representa una relación entre dos instancias de Nodos, relacionadas mediante un Tipo de relación.
Cardinalidad: Muchos: Se instanciará una vez por cada relación que haya entre dos instancias de nodos del grafo.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Búsqueda
Descripción: Clase abstracta que representa una búsqueda en la base de datos (representada en el grafo). Se instanciarán sus subclases dependiendo del tipo de búsqueda. Extraerá una lista de elementos que cumplen con las condiciones de búsqueda.
Cardinalidad: Al ser abstracta, 0. Sus subclases se instanciarán una cada vez que se realice una búsqueda.
Atributos: ArrayList<Result> results.
Relaciones: 
* Asociación con la clase Grafo: Indica sobre qué datos se realiza la búsqueda.
Métodos:
-abstract void search()
Realiza la búsqueda
-ArrayList<Result> getResults()
Devuelve una lista de los resultados de la búsqueda.


Nombre: Búsqueda simple
Descripción: Subclase de la clase Búsqueda. Representa una búsqueda simple, es decir, una búsqueda en la que se especifica un tipo de nodo del grado y un filtro. Muestra los nodos del tipo especificado que contienen el filtro de búsqueda.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda simple.
Atributos: Filtro con el que se realiza la búsqueda (filtro, no static).
Relaciones:
* Asociación con la clase Nodo (en realidad, subclases de Nodo). Indica qué tipos de elementos se van a buscar. Ej: autores.
Métodos:
- BusquedaSimple(string filtro)
Constructor de la clase que obtiene el filtro con el que realizará la búsqueda simple.


Nombre: Búsqueda de relaciones
Descripción: Subclase abstracta de la clase Búsqueda. Representa una búsqueda que sigue una estructura de relación determinada. Dependiendo de si se especifica un nodo de origen y destino, tenemos otras 3 subclases.
Cardinalidad: Al ser abstracta, 0.
Atributos: Re.
Relaciones: 
* Dependencia con la clase HeteSim. La utilizará para calcular el nivel de relación entre los elementos del grafo al que está relacionada.
* Asociación con la clase Estructura de relaciones. Será lo que defina qué estructura de relación seguirá al buscar los elementos.
Métodos:
-BusquedaRelacional(EstructuraRelaciones estructura)
Constructor de una búsqueda relacional, a la que se le pasa la estructura de relaciones.

Nombre: Búsqueda libre
Descripción: Subclase de la clase Búsqueda por relaciones. Representa una búsqueda en la que no se especifica desde qué elemento sale la relación definida por una Estructura de relaciones. Buscará todos los elementos del último tipo de la estructura relacionados con todos los elementos del primero.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda libre.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Búsqueda origen
Descripción: Subclase de Búsqueda por relaciones. Representa una búsqueda en la que se especifica un nodo de origen. Esto significa que buscará todos los nodos que estén relacionados con el de origen que cumplan con la Estructura de relaciones y condiciones de la búsqueda.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda con origen fijado.
Atributos: Node from.
Relaciones: 
* Asociación con la clase Nodo. Indica de qué instancia parte la Estructura de relaciones.
Métodos:
-BusquedaOrigen(EstructuraRelaciones estructura, Nodo from)
Llama al constructor de la super clase pasándole la estructura y guarda desde qué nodo sale la búsqueda.


Nombre: Búsqueda origen destino
Descripción: Subclase de Búsqueda por relaciones. Representa una búsqueda en la que se especifica un nodo de origen y otro de destino. Básicamente encuentra el nivel de relación entre los dos elementos especificados (HeteSim) en el grafo en el que se busca.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda con origen y destino fijados.
Atributos: Nodo from, Nodo to.
Relaciones:
* Asociación con la clase Nodo. Indica de qué instancia parte la Estructura de relaciones.
* Asociación con la clase Nodo. Indica en qué instancia termina la Estructura de relaciones.
Métodos:
-BúsquedaOrigenDestino(EstructuraRelaciones estructura, Nodo from, Nodo to)

Nombre: Result
Descripción: Clase que representa un ítem de la salida de una búsqueda. Es decir, representa a un elemento que cumple con la busqueda realizada.
Cardinalidad: Muchos por cada resultado de una búsqueda.
Atributos: int id_from, int id_to, int hetesim.
Cardinalidad:
* Agregación con la clase Búsqueda

Nombre: Estructura de relaciones
Descripción: Clase que representa una secuencia de tipos de nodos y relaciones en la que se basará la mayoría de tipos de búsqueda. Será la forma de especificar la estructura de relaciones del grafo que se quiere contemplar en una búsqueda por relaciones. También se encarga de insertar un tipo de nodo "nulo" en el medi de estructuras pares para poder realizar búsquedas relacionales sobre el hetesim.
Cardinalidad: 1 por búsqueda por relaciones.
Atributos: ArrayList<Relacion> estructura
Relaciones:
* Agregación con la clase Relación. Las relaciones agregadas y su ordenación indicará la estructura con la que se realizará una búsqueda.
Llama al constructor de la super clase pasándole la estructura y guarda desde qué nodo sale y acaba la búsqueda.
Métodos:
-EstructuraRelaciones(ArrayList<Relacion>)
Constructor de la clase. Inserta el tipo "nulo" en medio de las estructuras pares.
-Relacion getRelation(int i)
Devuelve la relación en la posición i

Especificación de clases de persistencia


Nombre: Controlador de persistencia
Descripción: Capa intermedia entre la memoria y el disco. Se comunica con el resto del programa para la importación/exportación de datos y usa los serializadores para convertir los mismos.
Cardinalidad: 1 por sesión del programa.
Atributos: Dirección donde se encuentran los archivos con los que va a trabajar el programa (path, no-static).
Relaciones: 
* Agregación con la clase Serializador.


Nombre: Serializador
Descripción: Clase abstracta que implementa los métodos básicos para serializar (interpretar) los datos en los dos sentidos (exportación e importación). 
Cardinalidad: Muchos. Al haber varios tipos de datos, se usará un tipo de serializador específico para cada uno de ellos.
Atributos: Nnguno
Relaciones: Ninguna.


Nombre: Serializador Nodos
Descripción: Clase abstracta que implementa los métodos para serializar un nodo genérico.
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.

Nombre: Serializador Arestas
Descripción: Serializa las relaciones "arestas". Es capaz de serializar tanto los tipos predefinidos como los especificados por los usuarios.
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Serializador Conferencia
Descripción: Implementación específica para el tipo de datos Conferencia. 
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Serializador Término
Descripción: Implementación específica para el tipo de datos Término. 
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Serializador Autor
Descripción: Implementación específica para el tipo de datos Autor. 
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Serializador Paper
Descripción: Implementación específica para el tipo de datos Paper. 
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Serializador Temática
Descripción: Implementación específica para el tipo de datos Temática. 
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.
