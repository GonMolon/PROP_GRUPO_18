Especificación de clases del dominio


                          
Nombre: Grafo
Descripción: Clase que representa un grafo heterogéneo en el que sus nodos se relacionan mediante relaciones bilaterales.
Cardinalidad: 1. Aunque el usuario podrá almacenar varios grafos, solo se podrá tratar uno a la vez.
Atributos: Map<Author> authors, Map<Paper> papers, Map<Conference> conferences, Map<Term> terms, Map<Subject> subjects.
Relaciones:
* Agregación con la clase Nodo.
* Agregación con la clase Arista, que son las relaciones ternarias Nodo-Nodo-Relación.
Métodos:
-Graph()
Constructor para crear instancias de la clase graph.
-int getSizeOf(NodeType type)
Retorna la cantidad de nodos de tipo type que tiene el grafo.
-void addNode(Node node)
Añade al grafo el nodo pasado como parámetro. Le asigna el siguiente identificador disponible.
-void addNode(Node node, int id)
Añade al grafo el nodo pasado como parámetro. Le asigna el Id pasado com parámetro siempre y cuando no haya sido usado.
-void removeNode(int id, NodeType type)
Elimina el nodo correspondiente al Id = key dentro de los nodos del tipo type.
-Node getNode(int id, NodeType type)
Retorna el nodo correspondiente al Id = key dentro de los nodos del tipo type.


Nombre: Nodo
Descripción: Clase abstracta que representa un elemento de nuestra base de datos.
Cardinalidad: Al ser abstracta, 0. El número conjunto de instancias de sus subclases será equivalente al número de elementos presentes en nuestra base de datos.
Atributos: Valor contenido del elemento que variará en función del tipo de nodo (value, no static).
Relaciones:
* Asociación ternaria con la clase Nodo y Relación. Indica con qué elementos se relaciona y de qué manera.
* Asociación con todo Nodo mediante la clase asociativa HeteSim. Indica el nivel de relación con ese nodo en función de una estructura de relaciones.
Metodos:
-Node(string value, int Id)
Constructora que crea una instancia de la clase node.
-setValue(string value)
Permite establecer el valor de la instancia.
-addRelation(int relationID, int nodeId)
Permite añadir una nueva relacion  para el nodo.
-removeRelation(int relationID, int nodeId)
Permite borrar una relación.
-isRelated(int TypeId, int nodeId)
Permite ver si la instancia de node está relacionada con un determinado nodo.
-ArrayList<int> getRelations(int relationID)
Devuelve todas sus relaciones (arestas) de un tipo de relación.

Nombre: NodeType
Descripción: Enumeración de los 5 tipos de nodos que pueden existir en el grafo.
Elementos: Author, Paper, Conference, Subject, Term

Nombre: Conferencia
Descripción: Subclase de la clase nodo. Representa un elemento de tipo conferencia de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por elemento de tipo conferencia.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Término
Descripción: Subclase de la clase nodo. Representa un elemento de tipo término de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada palabra diferente presente en los valores de nodos de los demás tipos pertenecientes al grafo, excluyendo palabras genéricas como “at”, “how”, “on”, “the”, etc.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Autor
Descripción: Subclase de la clase nodo. Representa un elemento de tipo autor de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada elemento autor de nuestra base de datos.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Paper
Descripción: Subclase de la clase nodo. Representa un elemento de tipo paper de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada elemento paper de nuestra base de datos.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Temática
Descripción: Subclase de la clase nodo. Representa un elemento de tipo temática de nuestra base de datos.
Cardinalidad: Muchos. Se instanciará una vez por cada temática de nuestra base de datos.
Atributos: Ninguno.
Relaciones: Ninguna.


Nombre: Relación
Descripción: Clase que representa un tipo de relación entre dos tipos de nodos.
Cardinalidad: Muchos. Se instanciará una vez por cada tipo de relación presente en el grafo.
Atributos: NodeType from, NodeType to, String value (nombre del tipo de relación).
Relaciones:
* Asociación ternaria con la clase Nodo i Nodo. Indica la relación entre dos elementos y el tipo de esta.
Métodos: 
- void Relation(NodeType node_out, NodeType node_in, String value)
Constructor que crea un nuevo tipo de relación con un determinado nombre y que va de un tipo de nodo de entrada a un tipo de nodo de salida
- void removeRelation()
Elimina el tipo de relación.
- void setName(String value)
Cambia el nombre de la relación por el nombre especificado en el parámetro.
- void setNodeIn(NodeType node_in)
Cambia el tipo de nodo de entrada de la relación
- void setNodeOut(NodeType node_out)
Cambia el tipo de nodo de salida de la relación
- String getName()
Retorna el nombre de la relación.
- NodeType getNodeIn()
Retorna el tipo de nodo de entrada de la relación.
- NodeType getNodeOut()
Retorna el tipo de nodo de salida de la relación.
                          
Nombre: Arista
Descripción: Clase que representa una relación entre dos instancias de Nodos, relacionadas mediante un Tipo de relación.
Cardinalidad: Muchos: Se instanciará una vez por cada relación que haya entre dos instancias de nodos del grafo.
Atributos: Ninguno.
Relaciones: Ninguna.
Nota: Esta clase tiene sentido solo a nivel conceptual. A la hora de la implementación en Java, esta relación se representa de forma indirecta mediante las listas de id's de los nodos.


Nombre: Búsqueda
Descripción: Clase abstracta que representa una búsqueda en la base de datos (representada en el grafo). Se instanciarán sus subclases dependiendo del tipo de búsqueda. Extraerá una lista de elementos que cumplen con las condiciones de búsqueda.
Cardinalidad: Al ser abstracta, 0. Sus subclases se instanciarán una cada vez que se realice una búsqueda.
Atributos: ArrayList<Result> results.
Relaciones: 
* Asociación con la clase Grafo: Indica sobre qué datos se realiza la búsqueda.
Métodos:
-abstract void search()
Realiza la búsqueda
-ArrayList<Result> getResults()
Devuelve una lista de los resultados de la búsqueda.


Nombre: Búsqueda simple
Descripción: Subclase de la clase Búsqueda. Representa una búsqueda simple, es decir, una búsqueda en la que se especifica un tipo de nodo del grado y un filtro. Muestra los nodos del tipo especificado que contienen el filtro de búsqueda.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda simple.
Atributos: Filtro con el que se realiza la búsqueda (filtro, no static).
Relaciones:
* Asociación con la clase Nodo (en realidad, subclases de Nodo). Indica qué tipos de elementos se van a buscar. Ej: autores.
Métodos:
- BusquedaSimple(string filtro)
Constructor de la clase que obtiene el filtro con el que realizará la búsqueda simple.


Nombre: Búsqueda de relaciones(RelationalSearch)
Descripción: Representa una búsqueda que sigue una estructura de relación determinada. Dependiendo de si se especifica un nodo de origen y destino, tenemos otras 3 subclases.
Cardinalidad: Al ser abstracta, 0.
Atributos:
* rs (estructura de relación de la que se tiene que realizar la búsqueda, no static).
* EdgesID(hashmap para relacionar los nodos con sus IDs, no static).
* FirstMatrix(variable auxiliar para saber si se ha creado ya la primera matriz, no static).
* Free_j_edgeMatrix(variable para saber qué columnas quedan libres al hacer una búsqueda con nodo de origen en la cual la primera relación del RelationStructure es una edgeRelation(tiene nodos imaginarios en el medio). Es una variable para un cálculo muy particular, no static).
Relaciones:
* Dependencia con la clase Matrix. La utilizará para calcular el hetesim entre los elementos del grafo.
* Asociación con la clase Estructura de relaciones. Será lo que defina qué estructura de relación seguirá al buscar los elementos.
Métodos:
* RelationalSearch(Graph graph, RelationStructure rs)
Constructor de una búsqueda relacional, a la que se le pasa la estructura de relaciones y el grafo donde realizar la búsqueda.
* Search()
Método que realiza la búsqueda.
* Hetesim()
Retorna la matriz con los valores de hetesim.
* i_hetesim(int i, int j, boolean normalize_rows)
Método auxiliar (función de inmersión) para los cálculos de hetesim.
* getNormalizedMatrix(Relation relation, boolean normalize_rows)
Devuelve la matriz normalizada a partir de la relación.
* getNormalizedEdgeLeftMatrix(Relation edgeRelation)
Devuelve la matriz normalizada de la parte izquierda de la edgeRelation (relación del medio con nodos imaginarios).
* getNormalizedEdgeRightMatrix(Relation edgeRelation)
Devuelve la matriz normalizada de la parte izquierda de la edgeRelation (relación del medio con nodos imaginarios).
* getColumnsEdgeMatrix(Relation edgeRelation)
        Devuelve las columnas/filas de las matrices normalizadas de la edgeRelation
* generateResults(Matrix matrix)
Método abstracto que tienen que implementar las subclases para seleccionar y presentar los resultados
* createFirstMatrix(Relation relation)
Método abstracto que tienen que implementar las subclases para crear la primera matriz, ya que
para optimizar las búsquedas con nodo fijo, no se realiza el cálculo del resto de nodos
* createFirstEdgeMatrix(Relation edgeRelation)
Método abstracto que tienen que implementar las subclases para crear la edgeMatrix en el caso que sea la primera matriz.
* getIteratorFirstMatrix(Matrix matrix)
Método abstracto que tienen que implementar las subclases para iterar sobre la primera matriz


Nombre: Búsqueda libre(FreeSearch)
Descripción: Subclase de la clase Búsqueda por relaciones. Representa una búsqueda en la que no se especifica desde qué elemento sale la relación definida por una Estructura de relaciones. Buscará todos los elementos del último tipo de la estructura relacionados con todos los elementos del primero.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda libre.
Atributos: Ninguno.
Relaciones:
* Dependencia de Matrix.
Métodos:
* FreeSearch(Graph graph, RelationStructure rs)
Constructor de una búsqueda libre, a la que se le pasa la estructura de relaciones y el grafo donde realizar la búsqueda.
* getIteratorFirstMatrix(Matrix matrix)
* createFirstMatrix(Relation relation)
* createFirstEdgeMatrix(Relation edgeRelation)


Nombre: Búsqueda origen(OriginSearch)
Descripción: Subclase de Búsqueda por relaciones. Representa una búsqueda en la que se especifica un nodo de origen. Esto significa que buscará todos los nodos que estén relacionados con el de origen que cumplan con la Estructura de relaciones y condiciones de la búsqueda.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda con origen fijado.
Atributos:
* Node from(nodo origen de la búsqueda relacional, no static)
Relaciones:
* Asociación con la clase Nodo. Indica de qué instancia parte la Estructura de relaciones.
Métodos:
* OriginSearch(Graph graph, RelationStructure rs, Node From)
Constructor de una búsqueda con nodo origen establecido, a la que se le pasa la estructura de relaciones, el grafo donde realizar la búsqueda y el nodo origen de la búsqueda relacional.
* getIteratorFirstMatrix(Matrix matrix)
* createFirstMatrix(Relation relation)
* createFirstEdgeMatrix(Relation edgeRelation)


Nombre: Búsqueda origen destino(OriginDestinationSearch)
Descripción: Subclase de Búsqueda por relaciones. Representa una búsqueda en la que se especifica un nodo de origen y otro de destino. Básicamente encuentra el nivel de relación entre los dos elementos especificados (HeteSim) en el grafo en el que se busca.
Cardinalidad: 1. Se instanciará cada vez que se realice una búsqueda con origen y destino fijados.
Atributos:
* Node from (nodo origen de la estructura de relación,no static)
* Node to (nodo destino de la estrucutra de relación, no static).
Relaciones:
* Asociación con la clase Nodo. Indica de qué instancia parte la Estructura de relaciones.
* Asociación con la clase Nodo. Indica en qué instancia termina la Estructura de relaciones.
Métodos:
* BúsquedaOrigenDestino(Graph graph, RelationStructure rs, Nodo from, Nodo to)
Constructor de una búsqueda con nodo origen y destino establecidos, a la que se le pasa la estructura de relaciones, el grafo donde realizar la búsqueda y el nodo origen y destino de la búsqueda relacional.
* generateResults(Matrix matrix)


Nombre: Estructura de relaciones(RelationalStructure)
Descripción: Clase que representa una secuencia de tipos de nodos y relaciones en la que se basará la mayoría de tipos de búsqueda. Será la forma de especificar la estructura de relaciones del grafo que se quiere contemplar en una búsqueda por relaciones.
Cardinalidad: 1 por búsqueda por relaciones.
Atributos: Ninguno
Relaciones:
* Agregación con la clase Relación. Las relaciones agregadas y su ordenación indicará la estructura con la que se realizará una búsqueda.
Llama al constructor de la super clase pasándole la estructura y guarda desde qué nodo sale y acaba la búsqueda.
Métodos:
* RelationStructure(NodeType From, ArrayList<Relation> r, NodeType to)
Constructor de la clase. Inserta el tipo "nulo" en medio de las estructuras pares.
* RelationStructure(Graph graph, NodeType from, int[] ids, NodeType to)
Constructor de la clase. Usa el primer constructor, transformando els grafo y las ids en una arraylist de relaciones.
* cloneArrayList(ArrayList<Relation> r)
Método que sirve para clonar una arraylist.
* setOrder(NodeType from, int i, NodeType to)
Método para comprobar si el orden de una relación es el correcto para poder hacer hetesim posteriormente, si no es el correcto se encarga de corregirlo.
* getArrayList(Graph graph, int[] ids)
Devuelve una arraylist de las relaciones que tienen los ids en el grafo, ambos son párametros necesarios de la función.


Nombre: Matriz(Matrix)
Descripción: Clase que se utiliza para el cálculo de HeteSim, a partir de matrices de adyecendcia.
Cardinalidad: 1 por cada vez que se calcule HeteSim.
Atributos:
* rows(arraylist de las filas de la matriz, no static)
* euclidean(array que mantiene la media euclidiana de las columnas, para optimizar su cálulo al normalizar la matriz)
* n(número de filas de la matriz)
* m(número de columnas de la matriz)
Relaciones: Ninguna
Métodos:
* Matrix(int n, int m)
Constructor de la clase. Crea una matriz n*m.
* Get(int i, int j)
Nos devuelve el valor de la posición (i,j).
* Put(int i, int j, double value)
Pone el valor (value), en la posición (i,j) de la matriz.
* Mul(Matrix mat)
Retorna la matriz resultante de multiplicar dos matrices.
* GetRows()
Retorna el numero de filas de la matriz.
* GetColumns()
Retorna el numero de columnas de la matriz.
* i_mul(Matrix mat, boolean normalize)
Método auxiliar de mul.
* getEuclidean(int j)
Devuelve la media euclidiana de la columna j.
* mul_norm(Matrix mat)
Retorna la matriz hetesim normalizada resultante de multiplicar dos matrices.
* binarySearch(ArrayList<Cell> row, int j)
Realiza una búsqueda binaria para encontrar la celda de la columna j, si existe. Devuelve false si no existe.
* i_binarySearch(ArrayList<Cell> row, int l, intr, int j)
Función de inmersión de binarysearch.
* checkPos(int i, int j)
Método que retorna si una posición es válida.


Nombre: Estructura de relaciones exception(RelationalStructureException)
Descripción: Clase para controlar los errores de la estrucutura de relación.
Cardinalidad: 1 por cada relación de estrucutura que se crea.
Atributos:
* Error (error que lanzamos cuando de produce un fallo, no static).
Relaciones: Ninguna
Métodos:
* RelationStructureExcpetion(Error error)
Constructor de la clase.
* GetError()
Devuelve el error provocado.
* PrintStackTrace()
Método que lanza mensajes de error, dependiendo que que tipo de error lanza un mensaje distinto.


Especificación de clases de persistencia


Nombre: PersistenceController
Descripción: Capa intermedia entre la memoria y el disco. Se comunica con el resto del programa para la importación/exportación de datos y usa los serializadores para convertir los mismos.
Cardinalidad: 1 por sesión del programa.
Atributos: Grago graph
Relaciones: 
* Agregación con la clase Serializador Nodos y Serializador Arestas.
Métodos:
-PersistenceController(Grafo graph)
Constructor inicial de la clase, que la asocia a un grafo.
-Void importNodes(String path, NodeType type)
Método para importar los nodos, de un fichero txt.
-Void importEdges(String path, NodeType type1, NodeType type2)
Método para importar las relaciones, de un fichero txt.
-exportGraph(String path)
Método para guardar el grafo con todos sus nodos y relaciones en ficheros txt.

Nombre: Serializador Nodos
Descripción: Serializa los nodos. Es capaz de serialitzar cualquier tipo de nodo.
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Node node, String data, int nodeId, String name
Relaciones: Ninguna.
Métodos:
-NodeSerializer(Node node)
Constructor de la clase a partir de un nodo.
-NodeSerializer(String data)
Constructor de la clase a partir de un String.
-Void inflate()
Método para importar un nodo a partir de un String.
-Void deflate()
Método para exportar el nodo en un String.
-String getData()
Método para obtener el String de un nodo.
-int getId()
Método para obtener el id de un nodo.
-String getName()
Método para obtener el nombre del objeto (Author,paper,conference,term)

Nombre: Serializador Arestas
Descripción: Serializa las relaciones "arestas". Es capaz de serializar tanto los tipos predefinidos como los especificados por los usuarios.
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: String data, Graph graph, NodeType ntype1, NodeType ntype2, Node node1, Node node2
Relaciones: Ninguna.
-EdgeSerializer(Graph graph, String data, NodeType ntype1, NodeType ntype2)
Constructor de la clase a partir de un grafo el String y dos tipos de nodo.
-EdgeSerializer(Node node1, Node node2)
Constructor de la clase a partir de dos nodos.
-Void inflate()
Método para importar el String, y obtener dos Object nodo.
-Void deflate()
Método para exportar los dos Objects en un String.
-Node getNode1()
Método para obtener el primer nodo de la relación.
-Node getNode2()
Método para obtener el segundo nodo de la relación
-String getData()
Método para obtener el String de los dos nodos relacionados.


Nombre: Serializador Etiqueta
Descripción: Implementación específica de la relación Aresta que permite leer/escribir las etiquetas.
Cardinalidad: Muchos. Se instanciará uno por cada fichero a importar/exportar.
Atributos: Ninguno.
Relaciones: Ninguna.
Métodos:
-LabelSerializer(Graph graph, String data, NodeType ntype1, NodeType ntype2)
Constructor de la clase a partir de un grafo, el String y los dos tipos de nodos del String.
-LabelSerializer(Node node1, Node node2)
Constructor de la clase a partir de dos nodos.
-Void inflate()
Método para importar el String, y obtener dos Object nodo.
-Void deflate()
Método para exportar los dos Objects en un String.

